<?php
/**
 * @category   PHPExcel
 * @package    PHPExcel_Writer_Excel2007
 * @copyright  Copyright (c) 2006 - 2012 PHPExcel (http://www.codeplex.com/PHPExcel)
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt	LGPL
 * @version    1.7.7, 2012-05-19
 */

class PHPExcel_Writer_Excel2007{private $_includeCharts=false;private $_preCalculateFormulas=true;private $_office2003compatibility=false;private $_writerParts=array();private $_spreadSheet;private $_stringTable=array();private $_stylesConditionalHashTable;private $_fillHashTable;private $_fontHashTable;private $_bordersHashTable;private $_numFmtHashTable;private $_drawingHashTable;private $_useDiskCaching=false;private $_diskCachingDirectory='./';public function __construct(PHPExcel $pPHPExcel=null){$this->setPHPExcel($pPHPExcel);$writerPartsArray=array('stringtable'=>'PHPExcel_Writer_Excel2007_StringTable','contenttypes'=>'PHPExcel_Writer_Excel2007_ContentTypes','docprops'=>'PHPExcel_Writer_Excel2007_DocProps','rels'=>'PHPExcel_Writer_Excel2007_Rels','style'=>'PHPExcel_Writer_Excel2007_Style','workbook'=>'PHPExcel_Writer_Excel2007_Workbook','worksheet'=>'PHPExcel_Writer_Excel2007_Worksheet',);foreach($writerPartsArray as $writer=>$class){$this->_writerParts[$writer]=new $class($this);}$hashTablesArray=array('_stylesConditionalHashTable','_fillHashTable','_fontHashTable','_bordersHashTable','_numFmtHashTable','_drawingHashTable');foreach($hashTablesArray as $tableName){$this->$tableName=new PHPExcel_HashTable();}}public function getWriterPart($pPartName=''){if($pPartName!=''&&isset($this->_writerParts[strtolower($pPartName)])){return $this->_writerParts[strtolower($pPartName)];}else{return null;}}public function save($pFilename=null){if($this->_spreadSheet!==NULL){$this->_spreadSheet->garbageCollect();$originalFilename=$pFilename;if(strtolower($pFilename)=='php://output'||strtolower($pFilename)=='php://stdout'){$pFilename=@tempnam(PHPExcel_Shared_File::sys_get_temp_dir(),'phpxltmp');if($pFilename==''){$pFilename=$originalFilename;}}$saveDebugLog=PHPExcel_Calculation::getInstance()->writeDebugLog;PHPExcel_Calculation::getInstance()->writeDebugLog=false;$saveDateReturnType=PHPExcel_Calculation_Functions::getReturnDateType();PHPExcel_Calculation_Functions::setReturnDateType(PHPExcel_Calculation_Functions::RETURNDATE_EXCEL);$this->_stringTable=array();for($i=0;$i<$this->_spreadSheet->getSheetCount();++$i){$this->_stringTable=$this->getWriterPart('StringTable')->createStringTable($this->_spreadSheet->getSheet($i),$this->_stringTable);}$this->_stylesConditionalHashTable->addFromSource($this->getWriterPart('Style')->allConditionalStyles($this->_spreadSheet));$this->_fillHashTable->addFromSource($this->getWriterPart('Style')->allFills($this->_spreadSheet));$this->_fontHashTable->addFromSource($this->getWriterPart('Style')->allFonts($this->_spreadSheet));$this->_bordersHashTable->addFromSource($this->getWriterPart('Style')->allBorders($this->_spreadSheet));$this->_numFmtHashTable->addFromSource($this->getWriterPart('Style')->allNumberFormats($this->_spreadSheet));$zipClass=PHPExcel_Settings::getZipClass();$objZip=new $zipClass();$ro=new ReflectionObject($objZip);$zipOverWrite=$ro->getConstant('OVERWRITE');$zipCreate=$ro->getConstant('CREATE');if(file_exists($pFilename)){unlink($pFilename);}if($objZip->open($pFilename,$zipOverWrite)!==true){if($objZip->open($pFilename,$zipCreate)!==true){throw new Exception("Could not open ".$pFilename." for writing.");}}$objZip->addFromString('[Content_Types].xml',$this->getWriterPart('ContentTypes')->writeContentTypes($this->_spreadSheet,$this->_includeCharts));$objZip->addFromString('_rels/.rels',$this->getWriterPart('Rels')->writeRelationships($this->_spreadSheet));$objZip->addFromString('xl/_rels/workbook.xml.rels',$this->getWriterPart('Rels')->writeWorkbookRelationships($this->_spreadSheet));$objZip->addFromString('docProps/app.xml',$this->getWriterPart('DocProps')->writeDocPropsApp($this->_spreadSheet));$objZip->addFromString('docProps/core.xml',$this->getWriterPart('DocProps')->writeDocPropsCore($this->_spreadSheet));$customPropertiesPart=$this->getWriterPart('DocProps')->writeDocPropsCustom($this->_spreadSheet);if($customPropertiesPart!==NULL){$objZip->addFromString('docProps/custom.xml',$customPropertiesPart);}$objZip->addFromString('xl/sharedStrings.xml',$this->getWriterPart('StringTable')->writeStringTable($this->_stringTable));$objZip->addFromString('xl/styles.xml',$this->getWriterPart('Style')->writeStyles($this->_spreadSheet));$objZip->addFromString('xl/workbook.xml',$this->getWriterPart('Workbook')->writeWorkbook($this->_spreadSheet,$this->_preCalculateFormulas));$chartCount=0;for($i=0;$i<$this->_spreadSheet->getSheetCount();++$i){$objZip->addFromString('xl/worksheets/sheet'.($i + 1).'.xml',$this->getWriterPart('Worksheet')->writeWorksheet($this->_spreadSheet->getSheet($i),$this->_stringTable,$this->_includeCharts));if($this->_includeCharts){}}$chartRef1=$chartRef2=0;for($i=0;$i<$this->_spreadSheet->getSheetCount();++$i){$objZip->addFromString('xl/worksheets/_rels/sheet'.($i + 1).'.xml.rels',$this->getWriterPart('Rels')->writeWorksheetRelationships($this->_spreadSheet->getSheet($i),($i + 1),$this->_includeCharts));}for($i=0;$i<$this->getDrawingHashTable()->count();++$i){if($this->getDrawingHashTable()->getByIndex($i)instanceof PHPExcel_Worksheet_Drawing){$imageContents=null;$imagePath=$this->getDrawingHashTable()->getByIndex($i)->getPath();if(strpos($imagePath,'zip://')!==false){$imagePath=substr($imagePath,6);$imagePathSplitted=explode('#',$imagePath);$imageZip=new ZipArchive();$imageZip->open($imagePathSplitted[0]);$imageContents=$imageZip->getFromName($imagePathSplitted[1]);$imageZip->close();unset($imageZip);}else{$imageContents=file_get_contents($imagePath);}$objZip->addFromString('xl/media/'.str_replace(' ','_',$this->getDrawingHashTable()->getByIndex($i)->getIndexedFilename()),$imageContents);}else if($this->getDrawingHashTable()->getByIndex($i)instanceof PHPExcel_Worksheet_MemoryDrawing){ob_start();call_user_func($this->getDrawingHashTable()->getByIndex($i)->getRenderingFunction(),$this->getDrawingHashTable()->getByIndex($i)->getImageResource());$imageContents=ob_get_contents();ob_end_clean();$objZip->addFromString('xl/media/'.str_replace(' ','_',$this->getDrawingHashTable()->getByIndex($i)->getIndexedFilename()),$imageContents);}}PHPExcel_Calculation_Functions::setReturnDateType($saveDateReturnType);PHPExcel_Calculation::getInstance()->writeDebugLog=$saveDebugLog;if($objZip->close()===false){throw new Exception("Could not close zip file $pFilename.");}if($originalFilename!=$pFilename){if(strtolower($originalFilename)!='php://output'&&strtolower($originalFilename)!='php://stdout'){if(copy($pFilename,$originalFilename)===false){throw new Exception("Could not copy temporary zip file $pFilename to $originalFilename.");}@unlink($pFilename);}else{if(file_exists($pFilename)){header('Content-Length: '.filesize($pFilename));ob_clean();flush();readfile($pFilename);exit;}}}}else{throw new Exception("PHPExcel object unassigned.");}}public function getPHPExcel(){if($this->_spreadSheet!==null){return $this->_spreadSheet;}else{throw new Exception("No PHPExcel assigned.");}}public function setPHPExcel(PHPExcel $pPHPExcel=null){$this->_spreadSheet=$pPHPExcel;return $this;}public function getStringTable(){return $this->_stringTable;}public function getStylesConditionalHashTable(){return $this->_stylesConditionalHashTable;}public function getFillHashTable(){return $this->_fillHashTable;}public function getFontHashTable(){return $this->_fontHashTable;}public function getBordersHashTable(){return $this->_bordersHashTable;}public function getNumFmtHashTable(){return $this->_numFmtHashTable;}public function getDrawingHashTable(){return $this->_drawingHashTable;}public function getIncludeCharts(){return $this->_includeCharts;}public function setIncludeCharts($pValue=false){$this->_includeCharts=(boolean) $pValue;return $this;}public function getPreCalculateFormulas(){return $this->_preCalculateFormulas;}public function setPreCalculateFormulas($pValue=true){$this->_preCalculateFormulas=$pValue;}public function getOffice2003Compatibility(){return $this->_office2003compatibility;}public function setOffice2003Compatibility($pValue=false){$this->_office2003compatibility=$pValue;return $this;}public function getUseDiskCaching(){return $this->_useDiskCaching;}public function setUseDiskCaching($pValue=false,$pDirectory=null){$this->_useDiskCaching=$pValue;if($pDirectory!==NULL){if(is_dir($pDirectory)){$this->_diskCachingDirectory=$pDirectory;}else{throw new Exception("Directory does not exist: $pDirectory");}}return $this;}public function getDiskCachingDirectory(){return $this->_diskCachingDirectory;}}